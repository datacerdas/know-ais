import { render } from "solid-js/web";
import { Component, createSignal, For } from "solid-js";
import MapGL, { Viewport, Source, Layer } from "solid-map-gl";
import "mapbox-gl/dist/mapbox-gl.css";


import * as h3 from "h3-js";
import geojson2h3 from "geojson2h3";

// import Papa from "papaparse";
import ports_wfp from "../data/ports_wfp.csv";
import ports_baltic from "../data/ports_baltic.csv";

import neo4j from "neo4j-driver"
import AppLoader from "../AppLoader";


const driver = neo4j.driver('bolt://localhost:7687', neo4j.auth.basic('neo4j', 'bps12345'))
const session = driver.session()

const personName = 'Alice'

try {
  const result = await session.run(
    'CREATE (a:Person {name: $name}) RETURN a',
    { name: personName }
  )

  const singleRecord = result.records[0]
  const node = singleRecord.get(0)

  console.log(node.properties.name, 'voila')
} finally {
  await session.close()
}

// on application exit:
await driver.close()

// const port_wsl = Papa.parse(datacsv[0]);
// console.log(port_wsl[1].h3_5_hexring)

// console.log(ports_baltic, 'dar')

const DATA = {
  type: "Feature",
  geometry: {
    type: "LineString",
    coordinates: [
      [36.21824109074759, 43.93089294433594],
      [36.15838983302817, 43.93226623535156],
      [36.115690180653395, 43.97346496582031],
      [36.097938036628065, 44.03800964355469],
      [36.12068224829002, 44.11491394042969],
      [36.157281045104284, 44.15748596191406],
      [36.20882309283712, 44.16435241699218],
      [36.24316561280259, 44.147186279296875],
      [36.27860013544234, 44.09156799316406],
      [36.29963177650553, 44.0167236328125],
      [36.27361812705447, 43.9727783203125],
      [36.24427318493909, 43.98582458496094],
      [36.22599623781621, 43.97209167480469],
      [36.212701229262045, 43.95149230957031],
      [36.21824109074759, 43.93089294433594],
    ],
  },
};

const PATH = {
  type: "Feature",
  geometry: {
    type: "LineString",
    coordinates: [
      [53.97498166666666, 11.340805],
      [53.99286833333333, 11.33142],
      [54.00789, 11.331561666666667],
      [54.01866500000001, 11.345753333333333],
      [54.02009166666666, 11.367011666666668],
      [54.029509999999995, 11.390418333333333],
      [54.03866666666666, 11.410015],
      [54.05126166666667, 11.431581666666665],
      [54.06003333333334, 11.448176666666667],
      [54.07323333333333, 11.448901666666664],
      [54.0884, 11.446295],
      [54.11261333333334, 11.442281666666664],
      [54.12754666666667, 11.4379],
      [54.14220666666667, 11.433831666666665],
      [54.15691333333334, 11.429793333333333],
      [54.17203833333333, 11.425691666666667],
      [54.18666833333333, 11.421294999999999],
      [54.20134833333334, 11.4165],
      [54.21605666666667, 11.411911666666667],
      [54.23116166666666, 11.407689999999999],
      [54.24602333333333, 11.403605],
      [54.26094833333333, 11.399321666666667],
      [54.27568833333334, 11.395778333333332],
      [54.29078666666667, 11.392330000000001],
      [54.30557833333334, 11.389188333333333],
      [54.320809999999994, 11.385931666666664],
      [54.33579333333334, 11.382971666666664],
      [54.35069166666667, 11.379601666666666],
      [54.36595500000001, 11.375626666666667],
      [54.380865, 11.372253333333333],
      [54.39595500000001, 11.367971666666667],
      [54.41050166666667, 11.364338333333333],
      [54.425169999999994, 11.361185],
      [54.439478333333334, 11.35796],
      [54.453509999999994, 11.354365],
      [54.467819999999996, 11.350323333333336],
      [54.48178833333333, 11.3463],
      [54.49608666666666, 11.342525],
      [54.51123000000001, 11.33883],
      [54.52633333333333, 11.335286666666667],
      [54.541533333333334, 11.331713333333333],
      [54.55331500000001, 11.319348333333336],
      [54.56017833333333, 11.295221666666665],
      [54.57910333333334, 11.227835],
      [54.586130000000004, 11.203575],
      [54.59316, 11.179355000000001],
      [54.60048666666667, 11.153993333333334],
      [54.609305000000006, 11.130664999999999],
      [54.61817333333333, 11.108189999999999],
      [54.627235, 11.084773333333333],
      [54.63623666666667, 11.06133],
      [54.64525, 11.038013333333335],
      [54.65411833333334, 11.015233333333333],
      [54.66269666666667, 10.992556666666667],
      [54.671096666666664, 10.969625],
      [54.679435, 10.946803333333332],
      [54.68802166666666, 10.923258333333333],
      [54.69656833333333, 10.90035],
      [54.70702666666666, 10.883208333333334],
      [54.72241500000001, 10.882071666666667],
      [54.73822833333333, 10.88115],
      [54.75332166666666, 10.880143333333333],
      [54.76877333333334, 10.878689999999999],
      [54.78423833333333, 10.877186666666667],
      [54.799275, 10.8756],
      [54.815234999999994, 10.873648333333335],
      [54.83034333333333, 10.87244],
      [54.84555, 10.87759],
      [54.86008833333333, 10.883458333333332],
      [54.875645, 10.889595],
      [54.891675, 10.895771666666667],
      [54.906935, 10.901546666666665],
      [54.92016166666666, 10.913553333333333],
      [54.93045, 10.930713333333333],
      [54.941835, 10.949703333333336],
      [54.951966666666664, 10.966325],
      [54.96394666666666, 10.984995],
      [54.97397833333334, 11.00078],
      [54.98579166666666, 11.019396666666667],
      [54.999405, 11.027343333333333],
      [55.01237, 11.0298],
      [55.027975, 11.032203333333333],
      [55.04581500000001, 11.039661666666667],
      [55.06121666666667, 11.043776666666664],
      [55.07691333333333, 11.043545],
      [55.093284999999995, 11.045544999999999],
      [55.10732333333333, 11.046483333333333],
      [55.12505166666666, 11.049506666666666],
      [55.15396833333333, 11.055251666666667],
      [55.166955, 11.061411666666665],
      [55.17828833333333, 11.075193333333333],
      [55.18950333333333, 11.088575],
      [55.21514666666667, 11.101013333333333],
      [55.22902166666667, 11.103655],
      [55.24872666666667, 11.092326666666667],
      [55.26418833333334, 11.082558333333333],
      [55.27776166666666, 11.072428333333333],
      [55.295225, 11.059276666666667],
      [55.31075833333333, 11.047951666666664],
      [55.32495333333333, 11.04141],
      [55.34150833333333, 11.04092],
      [55.35582833333334, 11.040963333333336],
      [55.37641333333333, 11.031561666666667],
      [55.390798333333336, 11.01564],
      [55.40483166666667, 10.999621666666664],
      [55.41903333333333, 10.983423333333333],
      [55.43314666666666, 10.967683333333332],
      [55.447075, 10.952086666666665],
      [55.46139333333333, 10.936263333333333],
      [55.47548000000001, 10.920593333333333],
      [55.48911, 10.90526],
      [55.50275833333333, 10.889713333333333],
      [55.51645500000001, 10.873701666666667],
      [55.53164666666667, 10.860968333333336],
      [55.54805, 10.849403333333333],
      [55.5643, 10.838813333333333],
      [55.58118833333333, 10.827883333333334],
      [55.59817333333334, 10.816835000000001],
      [55.6144, 10.806131666666667],
      [55.63078666666666, 10.796],
      [55.64753333333334, 10.787296666666665],
      [55.66485666666666, 10.789431666666667],
      [55.68202166666666, 10.793906666666668],
      [55.69959666666666, 10.798368333333332],
      [55.71697666666667, 10.80258],
      [55.73362666666666, 10.806486666666665],
      [55.75014833333334, 10.80984],
      [55.76688000000001, 10.812918333333334],
      [55.78335166666667, 10.81654],
      [55.79879833333333, 10.820025],
      [55.81436833333333, 10.822956666666665],
      [55.82883666666667, 10.830623333333332],
      [55.84176, 10.847316666666664],
      [55.85476833333333, 10.864295],
      [55.86752166666667, 10.882018333333333],
      [55.88018833333334, 10.900425],
      [55.89294166666666, 10.919738333333333],
      [55.905134999999994, 10.939335],
      [55.91798333333333, 10.961031666666667],
      [55.93164, 10.977596666666667],
      [55.945195, 10.995586666666664],
      [55.95882666666667, 11.013578333333333],
      [55.97266333333334, 11.030441666666665],
      [55.98636333333334, 11.047338333333334],
      [55.999965, 11.06396],
      [56.013369999999995, 11.081035],
      [56.02833166666666, 11.095735000000001],
      [56.04462166666666, 11.107606666666667],
      [56.06064, 11.119225],
      [56.076975, 11.131173333333333],
      [56.092465000000004, 11.144383333333336],
      [56.10688333333334, 11.15957],
      [56.11819833333333, 11.18073],
      [56.129281666666664, 11.200825],
      [56.140480000000004, 11.221531666666667],
      [56.15204166666667, 11.242468333333333],
      [56.16371666666666, 11.263093333333336],
      [56.17680166666667, 11.280981666666667],
      [56.19139000000001, 11.296091666666667],
      [56.2061, 11.311241666666668],
      [56.22032166666666, 11.32605],
      [56.23514, 11.34067],
      [56.24750666666666, 11.352673333333335],
      [56.26005, 11.364873333333335],
      [56.27262666666667, 11.376868333333332],
      [56.28479166666666, 11.388193333333335],
      [56.297594999999994, 11.400096666666665],
      [56.30990833333333, 11.411713333333333],
      [56.32196, 11.425556666666667],
      [56.33223666666667, 11.441828333333332],
      [56.35041333333334, 11.476519999999999],
      [56.35977333333334, 11.495001666666667],
      [56.36895500000001, 11.513566666666666],
      [56.38693166666667, 11.550725],
      [56.40477166666667, 11.585906666666665],
      [56.41430666666667, 11.603535],
      [56.42396333333333, 11.62111],
      [56.43366666666667, 11.63848],
      [56.44356166666667, 11.656039999999999],
      [56.45352333333334, 11.673385000000001],
      [56.462915, 11.691461666666667],
      [56.48098833333334, 11.726338333333333],
      [56.49863000000001, 11.76084],
      [56.50770166666667, 11.778333333333334],
      [56.516819999999996, 11.795828333333333],
      [56.53456833333333, 11.830296666666667],
      [56.54355500000001, 11.848163333333336],
      [56.56061500000001, 11.883376666666667],
      [56.56934166666666, 11.901791666666664],
      [56.58757166666667, 11.936314999999999],
      [56.59696666666667, 11.953380000000001],
      [56.615305000000006, 11.986563333333333],
      [56.62461999999999, 12.003796666666664],
      [56.63353000000001, 12.020703333333335],
      [56.65138833333334, 12.053213333333336],
      [56.65975333333334, 12.07076],
      [56.66790666666667, 12.08796],
      [56.68510500000001, 12.121468333333333],
      [56.69420166666666, 12.139363333333336],
      [56.71164666666667, 12.17501],
      [56.72084333333334, 12.19294],
      [56.730045, 12.211141666666665],
      [56.739263333333334, 12.229326666666667],
      [56.75742666666667, 12.264761666666667],
      [56.77655333333333, 12.299655],
      [56.78621, 12.317033333333333],
      [56.80453000000001, 12.351823333333336],
      [56.81355166666667, 12.369433333333333],
      [56.82255, 12.386825],
      [56.83936666666666, 12.421933333333332],
      [56.859265, 12.450405],
      [56.86911833333333, 12.45725],
      [56.87716666666667, 12.461863333333335],
      [56.88294666666667, 12.467648333333333],
      [56.88746666666667, 12.474871666666667],
      [56.88928833333333, 12.479425],
    ],
  },
};

// const kRing = h3.kRing(index, 3);
// const poly = h3.polyfill(
//   [
//     [
//       [36.21824109074759, 43.93089294433594],
//       [36.15838983302817, 43.93226623535156],
//       [36.115690180653395, 43.97346496582031],
//       [36.097938036628065, 44.03800964355469],
//       [36.12068224829002, 44.11491394042969],
//       [36.157281045104284, 44.15748596191406],
//       [36.20882309283712, 44.16435241699218],
//       [36.24316561280259, 44.147186279296875],
//       [36.27860013544234, 44.09156799316406],
//       [36.29963177650553, 44.0167236328125],
//       [36.27361812705447, 43.9727783203125],
//       [36.24427318493909, 43.98582458496094],
//       [36.22599623781621, 43.97209167480469],
//       [36.212701229262045, 43.95149230957031],
//       [36.21824109074759, 43.93089294433594],
//     ],
//   ],
//   8
// );
// // const cor = h3.h3SetToMultiPolygon(poly, true);
// const polyfi = geojson2h3.h3SetToFeatureCollection(poly);
// // console.log(DATA, 'ada', polyfi, 'sazda');

const polygon = {
  type: "Feature",
  geometry: {
    type: "Polygon",
    coordinates: [
      [
        [-122.47485823276713, 37.85878356045377],
        [-122.47504834087829, 37.86196795698972],
        [-122.47845104316997, 37.86010614563313],
        [-122.47485823276713, 37.85878356045377],
      ],
    ],
  },
};

const hexagons = geojson2h3.featureToH3Set(polygon, 10);
// -> ['8a2830855047fff', '8a2830855077fff', '8a283085505ffff', '8a283085506ffff']
// console.log(hexagons)
// console.log('______________________')
// console.log(JSON.parse(port_wsl[1].h3_5_hexring.replace(/'/g, '"')))

// const hexagons2 = port_wsl[1].h3_5_hexring

// const feature = geojson2h3.h3SetToFeature(hexagons);
const feature = geojson2h3.h3SetToMultiPolygonFeature(
  JSON.parse(ports_wfp[20].h3_5_hexring.replace(/'/g, '"'))
);
// -> {type: 'Feature', properties: {}, geometry: {type: 'Polygon', coordinates: [...]}}

const port_baltic = geojson2h3.h3SetToMultiPolygonFeature(
  JSON.parse(ports_baltic[20].h3_5_hexring.replace(/'/g, '"'))
);


let features: any[] = [];
// ports_wfp.forEach((e: any) => {
//   console.log(JSON.parse(e.h3_5_hexring.replace(/'/g, '"')));
//   // .forEach((e: any) => {
//   //   console.log(e, 'a')
//   // })
// });
// console.log(features, "ada", feature);

let ports : any[] = []
ports_baltic.forEach((e:any) => {
  let h3_5_hexring = 
    geojson2h3.h3SetToMultiPolygonFeature(
      JSON.parse(e.h3_5_hexring.replace(/'/g, '"'))
    );
  ports.push(h3_5_hexring)
})
console.log(ports, '31')

// const multi_port = (h3:any) => {
  // geojson2h3.h3SetToMultiPolygonFeature(
  //   JSON.parse(h3)
  // );
//   console.log(JSON.parse(h3))
// }


const Map: Component = () => {
  const [viewport, setViewport] = createSignal({
    center: [20.177059, 60.143988],
    zoom: 4,
  } as Viewport);
  const [mouseCoords, setMouseCoords] = createSignal({ lat: 0, lng: 0 });

  return (
    <MapGL
      options={{
        style: "mb:dark",
      }}
      viewport={viewport()}
      onViewportChange={(evt: Viewport) => setViewport(evt)}
      onMouseMove={(evt: any) => setMouseCoords(evt.lngLat)}
    >

      <For each={ports} fallback={<AppLoader />}>
        {(item: any) => (          
            <Source
              source={{
                type: "geojson",
                data: item,
              }}
            >
              <Layer
                style={{
                  type: "line",
                  paint: {
                    "line-color": "hsl(100, 100%, 50%)",
                    "line-width": 3,
                  },
                }}
              />
            </Source>
          )
        }
      </For>

      {/* <Source
        source={{
          type: "geojson",
          data: PATH,
        }}
      >
        <Layer
          style={{
            type: "line",
            paint: {
              "line-color": "hsl(100, 100%, 50%)",
              "line-width": 3,
            },
          }}
        />
      </Source> */}
    </MapGL>
  );
};

export default Map;
